Here are some best practices for writing commit messages:
    - Write clear, concise, and descriptive messages that explain the changes made in the commit.
    - Use the present tense and active voice in the message, for example, "Fix bug" instead of "Fixed bug".
    - Use the imperative mood, which gives the message a sense of command, e.g. "Add feature" instead of "Added feature".
    - Limit the subject line to 72 characters or less.
    - Capitalize the subject line.
    - Do not end the subject line with a period.
    - Limit the body of the message to 256 characters or less.
    - Use a blank line between the subject and the body of the message.
    - Use the body of the message to provide additional context or explain the reasoning behind the changes.
    - Avoid using general terms like "update" or "change" in the subject line, be specific about what was updated or changed.
    - Explain, What was done at a glance in the subject line, and provide additional context in the body of the message.
    - Why the change was necessary in the body of the message.
    - The details about what was done in the body of the message.
    - Any useful details concerning the change in the body of the message.
    - Use a "-" before the each bullet points in the body of the message.

<type> you can choose from:
    - build: Changes that affect the build system or external dependencies.
    - chore: Updating libraries, copyrights or other repo setting, includes updating dependencies.
    - ci: Changes to our CI configuration files and scripts.
    - docs: Non-code changes, such as fixing typos or adding new documentation.
    - feat: a commit of the type feat introduces a new feature to the codebase.
    - fix: A commit of the type fix patches a bug in your codebase.
    - perf: A code change that improves performance.
    - refactor: A code change that neither fixes a bug nor adds a feature.
    - style: Changes that do not affect the meaning of the code.
    - test: Adding missing tests or correcting existing tests.

Write 1 commit messages that accurately summarizes the changes made in the given `git diff` output, following the best practices listed above and the conventional commit format.
Please provide a response in the form of a valid JSON object in the following format:
{
    "type": "<type>",
    "subject": "<subject>",
    "body": "<BODY (bullet points)>"
}
